/* The following code was generated by JFlex 1.3.5 on 05/02/18 11:50 */

package pasito.syntax;

import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.ComplexSymbolFactory;
import java.io.IOException;
import java_cup.runtime.Symbol;
import java.io.FileInputStream;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 05/02/18 11:50 from the specification file
 * <tt>file:/home/jaubai/eclipse-workspace/despacito2/lexer.jflex</tt>
 */
public class PasitoScanner implements java_cup.runtime.Scanner, sym {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;
  final private static String yy_NL = System.getProperty("line.separator");

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\0\1\6\1\3\1\5\1\5\1\4\22\0\1\6\1\57\3\0"+
    "\1\63\1\56\1\0\1\67\1\70\1\2\1\55\1\64\1\17\1\15"+
    "\1\1\1\11\1\12\1\32\1\31\1\35\1\12\1\34\1\12\2\10"+
    "\1\65\1\66\1\53\1\54\1\62\2\0\4\14\1\16\1\14\21\20"+
    "\1\13\2\20\1\71\1\0\1\72\1\61\2\0\1\25\1\21\1\42"+
    "\1\40\1\24\1\33\1\44\1\46\1\27\1\20\1\51\1\23\1\52"+
    "\1\26\1\22\1\50\1\20\1\37\1\43\1\30\1\41\1\36\1\45"+
    "\1\13\1\47\1\20\1\73\1\60\1\74\7\0\1\5\44\0\1\20"+
    "\12\0\1\20\4\0\1\20\5\0\27\20\1\0\37\20\1\0\u01ca\20"+
    "\4\0\14\20\16\0\5\20\7\0\1\20\1\0\1\20\201\0\5\20"+
    "\1\0\2\20\2\0\4\20\10\0\1\20\1\0\3\20\1\0\1\20"+
    "\1\0\24\20\1\0\123\20\1\0\213\20\10\0\236\20\11\0\46\20"+
    "\2\0\1\20\7\0\47\20\110\0\33\20\5\0\3\20\55\0\53\20"+
    "\25\0\12\7\4\0\2\20\1\0\143\20\1\0\1\20\17\0\2\20"+
    "\7\0\2\20\12\7\3\20\2\0\1\20\20\0\1\20\1\0\36\20"+
    "\35\0\131\20\13\0\1\20\16\0\12\7\41\20\11\0\2\20\4\0"+
    "\1\20\5\0\26\20\4\0\1\20\11\0\1\20\3\0\1\20\27\0"+
    "\31\20\107\0\1\20\1\0\13\20\127\0\66\20\3\0\1\20\22\0"+
    "\1\20\7\0\12\20\4\0\12\7\1\0\7\20\1\0\7\20\5\0"+
    "\10\20\2\0\2\20\2\0\26\20\1\0\7\20\1\0\1\20\3\0"+
    "\4\20\3\0\1\20\20\0\1\20\15\0\2\20\1\0\3\20\4\0"+
    "\12\7\2\20\23\0\6\20\4\0\2\20\2\0\26\20\1\0\7\20"+
    "\1\0\2\20\1\0\2\20\1\0\2\20\37\0\4\20\1\0\1\20"+
    "\7\0\12\7\2\0\3\20\20\0\11\20\1\0\3\20\1\0\26\20"+
    "\1\0\7\20\1\0\2\20\1\0\5\20\3\0\1\20\22\0\1\20"+
    "\17\0\2\20\4\0\12\7\25\0\10\20\2\0\2\20\2\0\26\20"+
    "\1\0\7\20\1\0\2\20\1\0\5\20\3\0\1\20\36\0\2\20"+
    "\1\0\3\20\4\0\12\7\1\0\1\20\21\0\1\20\1\0\6\20"+
    "\3\0\3\20\1\0\4\20\3\0\2\20\1\0\1\20\1\0\2\20"+
    "\3\0\2\20\3\0\3\20\3\0\14\20\26\0\1\20\25\0\12\7"+
    "\25\0\10\20\1\0\3\20\1\0\27\20\1\0\12\20\1\0\5\20"+
    "\3\0\1\20\32\0\2\20\6\0\2\20\4\0\12\7\25\0\10\20"+
    "\1\0\3\20\1\0\27\20\1\0\12\20\1\0\5\20\3\0\1\20"+
    "\40\0\1\20\1\0\2\20\4\0\12\7\1\0\2\20\22\0\10\20"+
    "\1\0\3\20\1\0\51\20\2\0\1\20\20\0\1\20\21\0\2\20"+
    "\4\0\12\7\12\0\6\20\5\0\22\20\3\0\30\20\1\0\11\20"+
    "\1\0\1\20\2\0\7\20\72\0\60\20\1\0\2\20\14\0\7\20"+
    "\11\0\12\7\47\0\2\20\1\0\1\20\2\0\2\20\1\0\1\20"+
    "\2\0\1\20\6\0\4\20\1\0\7\20\1\0\3\20\1\0\1\20"+
    "\1\0\1\20\2\0\2\20\1\0\4\20\1\0\2\20\11\0\1\20"+
    "\2\0\5\20\1\0\1\20\11\0\12\7\2\0\4\20\40\0\1\20"+
    "\37\0\12\7\26\0\10\20\1\0\44\20\33\0\5\20\163\0\53\20"+
    "\24\0\1\20\12\7\6\0\6\20\4\0\4\20\3\0\1\20\3\0"+
    "\2\20\7\0\3\20\4\0\15\20\14\0\1\20\1\0\12\7\6\0"+
    "\46\20\1\0\1\20\5\0\1\20\2\0\53\20\1\0\u014d\20\1\0"+
    "\4\20\2\0\7\20\1\0\1\20\1\0\4\20\2\0\51\20\1\0"+
    "\4\20\2\0\41\20\1\0\4\20\2\0\7\20\1\0\1\20\1\0"+
    "\4\20\2\0\17\20\1\0\71\20\1\0\4\20\2\0\103\20\45\0"+
    "\20\20\20\0\125\20\14\0\u026c\20\2\0\21\20\1\0\32\20\5\0"+
    "\113\20\25\0\15\20\1\0\4\20\16\0\22\20\16\0\22\20\16\0"+
    "\15\20\1\0\3\20\17\0\64\20\43\0\1\20\4\0\1\20\3\0"+
    "\12\7\46\0\12\7\6\0\130\20\10\0\51\20\1\0\1\20\5\0"+
    "\106\20\12\0\35\20\51\0\12\7\36\20\2\0\5\20\13\0\54\20"+
    "\25\0\7\20\10\0\12\7\46\0\27\20\11\0\65\20\53\0\12\7"+
    "\6\0\12\7\15\0\1\20\135\0\57\20\21\0\7\20\4\0\12\7"+
    "\51\0\36\20\15\0\2\20\12\7\54\20\32\0\44\20\34\0\12\7"+
    "\3\0\3\20\12\7\44\20\153\0\4\20\1\0\4\20\3\0\2\20"+
    "\11\0\300\20\100\0\u0116\20\2\0\6\20\2\0\46\20\2\0\6\20"+
    "\2\0\10\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0\37\20"+
    "\2\0\65\20\1\0\7\20\1\0\1\20\3\0\3\20\1\0\7\20"+
    "\3\0\4\20\2\0\6\20\4\0\15\20\5\0\3\20\1\0\7\20"+
    "\53\0\2\5\107\0\1\20\15\0\1\20\20\0\15\20\145\0\1\20"+
    "\4\0\1\20\2\0\12\20\1\0\1\20\3\0\5\20\6\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\4\20\1\0\13\20\2\0\4\20"+
    "\5\0\5\20\4\0\1\20\64\0\2\20\u0a7b\0\57\20\1\0\57\20"+
    "\1\0\205\20\6\0\4\20\3\0\2\20\14\0\46\20\1\0\1\20"+
    "\5\0\1\20\2\0\70\20\7\0\1\20\20\0\27\20\11\0\7\20"+
    "\1\0\7\20\1\0\7\20\1\0\7\20\1\0\7\20\1\0\7\20"+
    "\1\0\7\20\1\0\7\20\120\0\1\20\u01d5\0\2\20\52\0\5\20"+
    "\5\0\2\20\4\0\126\20\6\0\3\20\1\0\132\20\1\0\4\20"+
    "\5\0\51\20\3\0\136\20\21\0\33\20\65\0\20\20\u0200\0\u19b6\20"+
    "\112\0\u51cd\20\63\0\u048d\20\103\0\56\20\2\0\u010d\20\3\0\20\20"+
    "\12\7\2\20\24\0\57\20\20\0\31\20\10\0\106\20\61\0\11\20"+
    "\2\0\147\20\2\0\4\20\1\0\4\20\14\0\13\20\115\0\12\20"+
    "\1\0\3\20\1\0\4\20\1\0\27\20\35\0\64\20\16\0\62\20"+
    "\34\0\12\7\30\0\6\20\3\0\1\20\4\0\12\7\34\20\12\0"+
    "\27\20\31\0\35\20\7\0\57\20\34\0\1\20\12\7\46\0\51\20"+
    "\27\0\3\20\1\0\10\20\4\0\12\7\6\0\27\20\3\0\1\20"+
    "\5\0\60\20\1\0\1\20\3\0\2\20\2\0\5\20\2\0\1\20"+
    "\1\0\1\20\30\0\3\20\2\0\13\20\7\0\3\20\14\0\6\20"+
    "\2\0\6\20\2\0\6\20\11\0\7\20\1\0\7\20\221\0\43\20"+
    "\15\0\12\7\6\0\u2ba4\20\14\0\27\20\4\0\61\20\u2104\0\u016e\20"+
    "\2\0\152\20\46\0\7\20\14\0\5\20\5\0\1\20\1\0\12\20"+
    "\1\0\15\20\1\0\5\20\1\0\1\20\1\0\2\20\1\0\2\20"+
    "\1\0\154\20\41\0\u016b\20\22\0\100\20\2\0\66\20\50\0\14\20"+
    "\164\0\5\20\1\0\207\20\23\0\12\7\7\0\32\20\6\0\32\20"+
    "\13\0\131\20\3\0\6\20\2\0\6\20\2\0\6\20\2\0\3\20"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    61,   122,   183,   244,   305,   244,   366,   427,   488, 
      549,   610,   671,   732,   793,   854,   915,   976,  1037,  1098, 
     1159,  1220,  1281,  1342,  1403,  1464,  1525,  1586,  1647,  1708, 
     1769,  1830,  1891,  1952,  2013,    61,  2074,    61,    61,    61, 
       61,    61,    61,    61,  2135,  2196,    61,    61,   366,  2257, 
     2318,  2379,  2440,  2501,    61,    61,  2562,  2623,  2684,  2745, 
      549,  2806,  2867,  2928,  2989,  3050,  3111,  3172,  3233,  3294, 
     3355,  3416,  3477,  3538,  3599,  3660,  3721,  3782,  3843,  3904, 
       61,  3965,    61,    61,    61,    61,    61,    61,  4026,    61, 
       61,    61,    61,    61,  4087,    61,    61,  4148,  2379,  4209, 
       61,  4270,  4331,  4392,  4453,  4514,  4575,   549,  4636,  4697, 
     4758,   549,  4819,  4880,  4941,  5002,  5063,  5124,  5185,  5246, 
     5307,  5368,  5429,   549,    61,    61,    61,    61,  5490,  5490, 
     5551,  5612,   549,  5673,  5734,  5795,   549,  5856,  5917,   549, 
     5978,  6039,  6100,  6161,  6222,  6283,   549,   549,  6344,  6405, 
     6466,   549,  6527,  6588,   549,  6649,   549,  6710,  6771,  6832, 
     6893,   549,   549,  6954,  7015,   549,  7076,  7137,  7198,  7259, 
     7320,  7381,   549,  7442,  7503,   549,  7564,  7625,   549,   549, 
      549,  7686,   549,  7747,   549,  7808,   549,  7869,   549,  7930, 
     7991,   549,   549,  8052,  8113,   549
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\11\2\13\1\14\1\13\1\15\1\13"+
    "\1\16\2\13\1\17\2\13\1\20\1\21\2\11\1\22"+
    "\2\11\1\23\1\24\1\25\1\13\1\26\1\27\1\30"+
    "\3\13\1\31\1\13\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\76\0\1\55"+
    "\1\56\51\0\1\57\74\0\1\60\23\0\4\7\71\0"+
    "\1\5\3\7\75\0\4\61\2\0\1\62\13\0\2\61"+
    "\1\0\2\61\46\0\1\61\3\11\2\0\1\62\13\0"+
    "\2\11\1\0\2\11\46\0\2\61\2\63\1\64\1\0"+
    "\1\62\13\0\2\63\1\0\2\63\46\0\6\13\1\0"+
    "\1\13\1\0\33\13\31\0\4\65\2\0\1\66\13\0"+
    "\2\65\1\0\2\65\56\0\1\67\34\0\1\70\27\0"+
    "\6\13\1\0\1\13\1\0\2\13\1\71\14\13\1\72"+
    "\13\13\31\0\6\13\1\0\1\13\1\0\3\13\1\73"+
    "\27\13\31\0\6\13\1\0\1\13\1\0\6\13\1\74"+
    "\4\13\1\75\16\13\1\76\31\0\6\13\1\0\1\13"+
    "\1\0\27\13\1\77\3\13\31\0\6\13\1\0\1\13"+
    "\1\0\2\13\1\100\1\101\1\13\1\102\13\13\1\103"+
    "\11\13\31\0\6\13\1\0\1\13\1\0\5\13\1\104"+
    "\25\13\31\0\6\13\1\0\1\13\1\0\4\13\1\105"+
    "\1\106\25\13\31\0\6\13\1\0\1\13\1\0\4\13"+
    "\1\107\26\13\31\0\6\13\1\0\1\13\1\0\2\13"+
    "\1\110\2\13\1\111\20\13\1\112\4\13\31\0\6\13"+
    "\1\0\1\13\1\0\4\13\1\113\3\13\1\114\14\13"+
    "\1\115\5\13\31\0\6\13\1\0\1\13\1\0\2\13"+
    "\1\116\30\13\31\0\6\13\1\0\1\13\1\0\5\13"+
    "\1\117\25\13\31\0\6\13\1\0\1\13\1\0\5\13"+
    "\1\120\25\13\41\0\1\121\33\0\1\122\1\123\74\0"+
    "\1\124\74\0\1\125\1\126\73\0\1\127\1\0\1\130"+
    "\2\0\1\131\67\0\1\132\74\0\1\133\3\0\1\134"+
    "\70\0\1\135\74\0\1\136\5\0\1\137\66\0\1\140"+
    "\74\0\1\141\20\0\3\55\1\0\71\55\2\56\1\142"+
    "\72\56\7\0\4\65\16\0\2\65\1\0\2\65\46\0"+
    "\2\61\2\63\2\0\1\62\13\0\2\63\1\0\2\63"+
    "\47\0\3\143\1\0\1\143\1\0\1\143\2\0\1\143"+
    "\2\0\2\143\3\0\5\143\2\0\1\143\1\0\1\143"+
    "\41\0\4\65\3\0\1\144\12\0\2\65\1\0\2\65"+
    "\54\0\1\145\66\0\6\13\1\0\1\13\1\0\2\13"+
    "\1\146\30\13\31\0\6\13\1\0\1\13\1\0\4\13"+
    "\1\147\26\13\31\0\6\13\1\0\1\13\1\0\23\13"+
    "\1\150\7\13\31\0\6\13\1\0\1\13\1\0\10\13"+
    "\1\151\22\13\31\0\6\13\1\0\1\13\1\0\30\13"+
    "\1\152\2\13\31\0\6\13\1\0\1\13\1\0\30\13"+
    "\1\153\2\13\31\0\6\13\1\0\1\13\1\0\17\13"+
    "\1\154\13\13\31\0\6\13\1\0\1\13\1\0\2\13"+
    "\1\155\30\13\31\0\6\13\1\0\1\13\1\0\3\13"+
    "\1\156\27\13\31\0\6\13\1\0\1\13\1\0\6\13"+
    "\1\157\24\13\31\0\6\13\1\0\1\13\1\0\17\13"+
    "\1\160\13\13\31\0\6\13\1\0\1\13\1\0\10\13"+
    "\1\161\22\13\31\0\6\13\1\0\1\13\1\0\6\13"+
    "\1\162\24\13\31\0\6\13\1\0\1\13\1\0\13\13"+
    "\1\163\17\13\31\0\6\13\1\0\1\13\1\0\6\13"+
    "\1\164\24\13\31\0\6\13\1\0\1\13\1\0\23\13"+
    "\1\165\7\13\31\0\6\13\1\0\1\13\1\0\5\13"+
    "\1\166\25\13\31\0\6\13\1\0\1\13\1\0\3\13"+
    "\1\167\27\13\31\0\6\13\1\0\1\13\1\0\17\13"+
    "\1\170\13\13\31\0\6\13\1\0\1\13\1\0\7\13"+
    "\1\171\23\13\31\0\6\13\1\0\1\13\1\0\10\13"+
    "\1\172\22\13\31\0\6\13\1\0\1\13\1\0\22\13"+
    "\1\173\10\13\31\0\6\13\1\0\1\13\1\0\30\13"+
    "\1\174\2\13\76\0\1\175\74\0\1\176\74\0\1\177"+
    "\20\0\1\56\1\200\1\142\72\56\7\0\4\201\4\0"+
    "\1\202\11\0\2\201\1\0\2\201\17\0\1\202\26\0"+
    "\6\13\1\0\1\13\1\0\3\13\1\203\27\13\31\0"+
    "\6\13\1\0\1\13\1\0\5\13\1\204\25\13\31\0"+
    "\6\13\1\0\1\13\1\0\4\13\1\205\26\13\31\0"+
    "\6\13\1\0\1\13\1\0\4\13\1\206\4\13\1\207"+
    "\21\13\31\0\6\13\1\0\1\13\1\0\2\13\1\210"+
    "\30\13\31\0\6\13\1\0\1\13\1\0\4\13\1\211"+
    "\26\13\31\0\6\13\1\0\1\13\1\0\5\13\1\212"+
    "\25\13\31\0\6\13\1\0\1\13\1\0\3\13\1\213"+
    "\27\13\31\0\6\13\1\0\1\13\1\0\22\13\1\214"+
    "\10\13\31\0\6\13\1\0\1\13\1\0\21\13\1\215"+
    "\11\13\31\0\6\13\1\0\1\13\1\0\24\13\1\216"+
    "\6\13\31\0\6\13\1\0\1\13\1\0\4\13\1\217"+
    "\1\220\25\13\31\0\6\13\1\0\1\13\1\0\10\13"+
    "\1\221\12\13\1\222\7\13\31\0\6\13\1\0\1\13"+
    "\1\0\4\13\1\223\26\13\31\0\6\13\1\0\1\13"+
    "\1\0\6\13\1\224\24\13\31\0\6\13\1\0\1\13"+
    "\1\0\4\13\1\225\26\13\31\0\6\13\1\0\1\13"+
    "\1\0\21\13\1\226\11\13\31\0\6\13\1\0\1\13"+
    "\1\0\10\13\1\227\22\13\31\0\6\13\1\0\1\13"+
    "\1\0\2\13\1\230\30\13\31\0\6\13\1\0\1\13"+
    "\1\0\31\13\1\231\1\13\31\0\4\201\16\0\2\201"+
    "\1\0\2\201\46\0\6\13\1\0\1\13\1\0\4\13"+
    "\1\232\26\13\31\0\6\13\1\0\1\13\1\0\31\13"+
    "\1\233\1\13\31\0\6\13\1\0\1\13\1\0\17\13"+
    "\1\234\13\13\31\0\6\13\1\0\1\13\1\0\12\13"+
    "\1\235\20\13\31\0\6\13\1\0\1\13\1\0\17\13"+
    "\1\236\13\13\31\0\6\13\1\0\1\13\1\0\10\13"+
    "\1\237\22\13\31\0\6\13\1\0\1\13\1\0\10\13"+
    "\1\240\22\13\31\0\6\13\1\0\1\13\1\0\17\13"+
    "\1\241\13\13\31\0\6\13\1\0\1\13\1\0\4\13"+
    "\1\242\26\13\31\0\6\13\1\0\1\13\1\0\17\13"+
    "\1\243\13\13\31\0\6\13\1\0\1\13\1\0\21\13"+
    "\1\244\11\13\31\0\6\13\1\0\1\13\1\0\7\13"+
    "\1\245\23\13\31\0\6\13\1\0\1\13\1\0\10\13"+
    "\1\246\22\13\31\0\6\13\1\0\1\13\1\0\22\13"+
    "\1\247\10\13\31\0\6\13\1\0\1\13\1\0\22\13"+
    "\1\250\10\13\31\0\6\13\1\0\1\13\1\0\22\13"+
    "\1\251\10\13\31\0\6\13\1\0\1\13\1\0\5\13"+
    "\1\252\25\13\31\0\6\13\1\0\1\13\1\0\5\13"+
    "\1\253\25\13\31\0\6\13\1\0\1\13\1\0\13\13"+
    "\1\254\17\13\31\0\6\13\1\0\1\13\1\0\10\13"+
    "\1\255\22\13\31\0\6\13\1\0\1\13\1\0\14\13"+
    "\1\256\16\13\31\0\6\13\1\0\1\13\1\0\26\13"+
    "\1\257\4\13\31\0\6\13\1\0\1\13\1\0\6\13"+
    "\1\260\24\13\31\0\6\13\1\0\1\13\1\0\3\13"+
    "\1\261\27\13\31\0\6\13\1\0\1\13\1\0\6\13"+
    "\1\262\24\13\31\0\6\13\1\0\1\13\1\0\10\13"+
    "\1\263\22\13\31\0\6\13\1\0\1\13\1\0\10\13"+
    "\1\264\22\13\31\0\6\13\1\0\1\13\1\0\26\13"+
    "\1\265\4\13\31\0\6\13\1\0\1\13\1\0\24\13"+
    "\1\266\6\13\31\0\6\13\1\0\1\13\1\0\6\13"+
    "\1\267\24\13\31\0\6\13\1\0\1\13\1\0\5\13"+
    "\1\270\25\13\31\0\6\13\1\0\1\13\1\0\15\13"+
    "\1\271\15\13\31\0\6\13\1\0\1\13\1\0\17\13"+
    "\1\272\13\13\31\0\6\13\1\0\1\13\1\0\10\13"+
    "\1\273\22\13\31\0\6\13\1\0\1\13\1\0\21\13"+
    "\1\274\11\13\31\0\6\13\1\0\1\13\1\0\4\13"+
    "\1\275\26\13\31\0\6\13\1\0\1\13\1\0\22\13"+
    "\1\276\10\13\31\0\6\13\1\0\1\13\1\0\2\13"+
    "\1\277\30\13\31\0\6\13\1\0\1\13\1\0\4\13"+
    "\1\300\26\13\31\0\6\13\1\0\1\13\1\0\4\13"+
    "\1\301\26\13\31\0\6\13\1\0\1\13\1\0\21\13"+
    "\1\302\11\13\31\0\6\13\1\0\1\13\1\0\24\13"+
    "\1\303\6\13\31\0\6\13\1\0\1\13\1\0\26\13"+
    "\1\304\4\13\22\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  9,  1,  9,  9,  9,  9,  9,  9,  9,  1,  0,  9,  9, 
     0,  0,  1,  0,  1,  0,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  1,  9,  9,  9,  9,  9,  9,  1,  9,  9,  9,  9,  9,  1,  9, 
     9,  0,  1,  0,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9, 
     1,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	private ComplexSymbolFactory symbolFactory;
    private Symbol ultimoSimbolo;

    public PasitoScanner(java.io.Reader reader, ComplexSymbolFactory sf) {
      this(reader);
      symbolFactory = sf;
    }

    /*
    * Método fábricas de símbolos
    * O símbolo retornado é uma instância de ComplexSymbolFactory, implementada pelo CUP
    */
    public Symbol symbol(String nome, int code) {
    	ultimoSimbolo = symbolFactory.newSymbol(nome, code,
                            new Location(yyline+1, yycolumn+1, yychar),
                            new Location(yyline+1, yycolumn+yylength(), yychar+yylength()));
        return ultimoSimbolo;
    }

    public Symbol symbol(String nome, int code, Object value) {
    	ultimoSimbolo = symbolFactory.newSymbol(nome, code,
                            new Location(yyline+1, yycolumn+1, yychar),
                            new Location(yyline+1, yycolumn+yylength(), yychar+yylength()),
                            value);
        return ultimoSimbolo;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PasitoScanner(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PasitoScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[8174];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1742) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 77: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [142] { return symbol(\"GO\", GO); }");
          {  return symbol("GO", GO);  }
        case 197: break;
        case 60: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [135] { return symbol(\"IF\", IF); }");
          {  return symbol("IF", IF);  }
        case 198: break;
        case 11: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [198] { return symbol(\"DOT\", DOT);}");
          {  return symbol("DOT", DOT); }
        case 199: break;
        case 10: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 18: 
        case 19: 
        case 20: 
        case 21: 
        case 22: 
        case 23: 
        case 24: 
        case 25: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 61: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 78: 
        case 79: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 108: 
        case 109: 
        case 110: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 121: 
        case 122: 
        case 130: 
        case 131: 
        case 133: 
        case 134: 
        case 135: 
        case 137: 
        case 138: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 144: 
        case 145: 
        case 148: 
        case 149: 
        case 150: 
        case 152: 
        case 153: 
        case 155: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 163: 
        case 164: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 173: 
        case 174: 
        case 176: 
        case 177: 
        case 181: 
        case 183: 
        case 185: 
        case 187: 
        case 189: 
        case 190: 
        case 193: 
        case 194: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [206] { return symbol(\"ID\", ID); }");
          {  return symbol("ID", ID);  }
        case 200: break;
        case 26: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [155] { return symbol(\"LT\", LT); }");
          {  return symbol("LT", LT);  }
        case 201: break;
        case 33: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [178] { return symbol(\"GT\", GT); }");
          {  return symbol("GT", GT);  }
        case 202: break;
        case 82: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [173] { return symbol(\"LE\", LE); }");
          {  return symbol("LE", LE);  }
        case 203: break;
        case 83: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [156] { return symbol(\"EQ\", EQ); }");
          {  return symbol("EQ", EQ);  }
        case 204: break;
        case 91: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [172] { return symbol(\"OR\", OR); }");
          {  return symbol("OR", OR);  }
        case 205: break;
        case 93: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [179] { return symbol(\"GE\", GE); }");
          {  return symbol("GE", GE);  }
        case 206: break;
        case 180: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [130] { return symbol(\"SWITCH\", SWITCH); }");
          {  return symbol("SWITCH", SWITCH);  }
        case 207: break;
        case 52: 
        case 128: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [153] { return symbol(\"FLOAT_NUMBER\", FLOAT_NUMBER); }");
          {  return symbol("FLOAT_NUMBER", FLOAT_NUMBER);  }
        case 208: break;
        case 8: 
        case 9: 
        case 50: 
        case 98: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [152] { return symbol(\"INT_NUMBER\", INT_NUMBER); }");
          {  return symbol("INT_NUMBER", INT_NUMBER);  }
        case 209: break;
        case 191: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [140] { return symbol(\"CONTINUE\", CONTINUE); }");
          {  return symbol("CONTINUE", CONTINUE);  }
        case 210: break;
        case 179: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [129] { return symbol(\"STRUCT\", STRUCT); }");
          {  return symbol("STRUCT", STRUCT);  }
        case 211: break;
        case 3: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [159] { return symbol(\"TIMES\", TIMES); }");
          {  return symbol("TIMES", TIMES);  }
        case 212: break;
        case 55: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [170] { return symbol(\"MINUSASSIGN\", MINUSASSIGN); }");
          {  return symbol("MINUSASSIGN", MINUSASSIGN);  }
        case 213: break;
        case 47: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [175] { return symbol(\"TIMESASSIGN\", TIMESASSIGN); }");
          {  return symbol("TIMESASSIGN", TIMESASSIGN);  }
        case 214: break;
        case 46: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [181] { return symbol(\"DIVASSIGN\", DIVASSIGN); }");
          {  return symbol("DIVASSIGN", DIVASSIGN);  }
        case 215: break;
        case 27: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [193] { return symbol(\"ASSIGN\", ASSIGN); }");
          {  return symbol("ASSIGN", ASSIGN);  }
        case 216: break;
        case 81: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [180] { return symbol(\"LSHIFT\", LSHIFT); }");
          {  return symbol("LSHIFT", LSHIFT);  }
        case 217: break;
        case 84: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [166] { return symbol(\"PLUSASSIGN\", PLUSASSIGN); }");
          {  return symbol("PLUSASSIGN", PLUSASSIGN);  }
        case 218: break;
        case 85: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [183] { return symbol(\"PLUSPLUS\", PLUSPLUS); }");
          {  return symbol("PLUSPLUS", PLUSPLUS);  }
        case 219: break;
        case 86: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [167] { return symbol(\"ANDASSIGN\", ANDASSIGN); }");
          {  return symbol("ANDASSIGN", ANDASSIGN);  }
        case 220: break;
        case 90: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [171] { return symbol(\"ORASSIGN\", ORASSIGN); }");
          {  return symbol("ORASSIGN", ORASSIGN);  }
        case 221: break;
        case 92: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [176] { return symbol(\"EXCLORASSIGN\", EXCLORASSIGN); }");
          {  return symbol("EXCLORASSIGN", EXCLORASSIGN);  }
        case 222: break;
        case 94: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [185] { return symbol(\"RSHIFT\", RSHIFT); }");
          {  return symbol("RSHIFT", RSHIFT);  }
        case 223: break;
        case 95: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [186] { return symbol(\"MODASSIGN\", MODASSIGN); }");
          {  return symbol("MODASSIGN", MODASSIGN);  }
        case 224: break;
        case 96: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [194] { return symbol(\"DASSIGN\", DASSIGN); }");
          {  return symbol("DASSIGN", DASSIGN);  }
        case 225: break;
        case 124: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [182] { return symbol(\"LSHIFTASSIGN\", LSHIFTASSIGN); }");
          {  return symbol("LSHIFTASSIGN", LSHIFTASSIGN);  }
        case 226: break;
        case 125: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [190] { return symbol(\"BITCLRASSIGN\", BITCLRASSIGN); }");
          {  return symbol("BITCLRASSIGN", BITCLRASSIGN);  }
        case 227: break;
        case 126: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [187] { return symbol(\"RSHIFTASSIGN\", RSHIFTASSIGN); }");
          {  return symbol("RSHIFTASSIGN", RSHIFTASSIGN);  }
        case 228: break;
        case 195: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [131] { return symbol(\"FALLTHROUGH\", FALLTHROUGH); }");
          {  return symbol("FALLTHROUGH", FALLTHROUGH);  }
        case 229: break;
        case 192: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [133] { return symbol(\"INTERFACE\", INTERFACE); }");
          {  return symbol("INTERFACE", INTERFACE);  }
        case 230: break;
        case 161: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [127] { return symbol(\"RANGE\", RANGE); }");
          {  return symbol("RANGE", RANGE);  }
        case 231: break;
        case 184: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [118] { return symbol(\"FLOAT64\", FLOAT64); }");
          {  return symbol("FLOAT64", FLOAT64);  }
        case 232: break;
        case 182: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [116] { return symbol(\"BOOLEAN\", BOOLEAN); }");
          {  return symbol("BOOLEAN", BOOLEAN);  }
        case 233: break;
        case 100: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [196] { return symbol(\"DOTDOTDOT\", DOTDOTDOT); }");
          {  return symbol("DOTDOTDOT", DOTDOTDOT);  }
        case 234: break;
        case 89: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [168] { return symbol(\"NOTEQ\", NOTEQ); }");
          {  return symbol("NOTEQ", NOTEQ);  }
        case 235: break;
        case 54: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [188] { return symbol(\"MINUSMINUS\", MINUSMINUS); }");
          {  return symbol("MINUSMINUS", MINUSMINUS);  }
        case 236: break;
        case 12: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [158] { return symbol(\"MINUS\", MINUS); }");
          {  return symbol("MINUS", MINUS);  }
        case 237: break;
        case 172: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [144] { return symbol(\"IMPORT\", IMPORT); }");
          {  return symbol("IMPORT", IMPORT);  }
        case 238: break;
        case 29: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [165] { return symbol(\"BITAND\", BITAND); }");
          {  return symbol("BITAND", BITAND);  }
        case 239: break;
        case 32: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [174] { return symbol(\"BITXOR\", BITXOR); }");
          {  return symbol("BITXOR", BITXOR);  }
        case 240: break;
        case 88: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [189] { return symbol(\"BITCLR\", BITCLR); }");
          {  return symbol("BITCLR", BITCLR);  }
        case 241: break;
        case 156: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [117] { return symbol(\"INT32\", INT32); }");
          {  return symbol("INT32", INT32);  }
        case 242: break;
        case 186: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [122] { return symbol(\"DEFAULT\", DEFAULT); }");
          {  return symbol("DEFAULT", DEFAULT);  }
        case 243: break;
        case 178: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [147] { return symbol(\"SELECT\", SELECT); }");
          {  return symbol("SELECT", SELECT);  }
        case 244: break;
        case 175: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [132] { return symbol(\"RETURN\", RETURN); }");
          {  return symbol("RETURN", RETURN);  }
        case 245: break;
        case 162: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [141] { return symbol(\"DEFER\", DEFER); }");
          {  return symbol("DEFER", DEFER);  }
        case 246: break;
        case 188: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [146] { return symbol(\"PACKAGE\", PACKAGE); }");
          {  return symbol("PACKAGE", PACKAGE);  }
        case 247: break;
        case 37: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [195] { return symbol(\"SEMICOLON\", SEMICOLON); }");
          {  return symbol("SEMICOLON", SEMICOLON);  }
        case 248: break;
        case 36: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [197] { return symbol(\"COLON\", COLON); }");
          {  return symbol("COLON", COLON);  }
        case 249: break;
        case 35: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [192] { return symbol(\"COMMA\", COMMA); }");
          {  return symbol("COMMA", COMMA);  }
        case 250: break;
        case 165: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [125] { return symbol(\"CONST\", CONST); }");
          {  return symbol("CONST", CONST);  }
        case 251: break;
        case 43: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [205] { return symbol(\"RBRACK\", RBRACK); }");
          {  return symbol("RBRACK", RBRACK);  }
        case 252: break;
        case 42: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [204] { return symbol(\"LBRACK\", LBRACK); }");
          {  return symbol("LBRACK", LBRACK);  }
        case 253: break;
        case 41: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [203] { return symbol(\"RSBRACK\", RSBRACK); }");
          {  return symbol("RSBRACK", RSBRACK);  }
        case 254: break;
        case 40: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [202] { return symbol(\"LSBRACK\", LSBRACK); }");
          {  return symbol("LSBRACK", LSBRACK);  }
        case 255: break;
        case 31: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [169] { return symbol(\"BITOR\", BITOR); }");
          {  return symbol("BITOR", BITOR);  }
        case 256: break;
        case 154: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [138] { return symbol(\"BREAK\", BREAK); }");
          {  return symbol("BREAK", BREAK);  }
        case 257: break;
        case 80: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [177] { return symbol(\"CHANNEL\", CHANNEL); }");
          {  return symbol("CHANNEL", CHANNEL);  }
        case 258: break;
        case 4: 
        case 5: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [106] { if ( ultimoSimbolo.sym == ID ||"+yy_NL+"\t\t\t\t\t\t   ultimoSimbolo.sym == INT32 ||"+yy_NL+"\t\t\t\t\t\t   ultimoSimbolo.sym == FLOAT64 ||"+yy_NL+"\t\t\t\t\t\t   ultimoSimbolo.sym == FLOAT_NUMBER"+yy_NL+"\t\t\t\t\t\t   // || ...  <--- Ver https://golang.org/ref/spec#Semicolons"+yy_NL+"\t\t\t\t\t\t ) "+yy_NL+"\t\t\t\t\t     return symbol(\"SEMICOLON\", SEMICOLON); }");
          {  if ( ultimoSimbolo.sym == ID ||
						   ultimoSimbolo.sym == INT32 ||
						   ultimoSimbolo.sym == FLOAT64 ||
						   ultimoSimbolo.sym == FLOAT_NUMBER
						   // || ...  <--- Ver https://golang.org/ref/spec#Semicolons
						 ) 
					     return symbol("SEMICOLON", SEMICOLON);  }
        case 259: break;
        case 1: 
        case 7: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [207] { System.out.println("+yy_NL+"\t\t\t\t\t\t\"Scanner warning >> \" + "+yy_NL+"\t\t\t\t\t\t\"Unrecognized character \'\" + yytext() + \"\' -- ignored\" + \" at line\" +"+yy_NL+"                \t\t(yyline+1) + \", column \" + (yycolumn+1) ); }");
          {  System.out.println(
						"Scanner warning >> " + 
						"Unrecognized character '" + yytext() + "' -- ignored" + " at line" +
                		(yyline+1) + ", column " + (yycolumn+1) );  }
        case 260: break;
        case 34: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [184] { return symbol(\"MOD\", MOD); }");
          {  return symbol("MOD", MOD);  }
        case 261: break;
        case 2: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [160] { return symbol(\"DIV\", DIV); }");
          {  return symbol("DIV", DIV);  }
        case 262: break;
        case 30: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [162] { return symbol(\"NOT\", NOT); }");
          {  return symbol("NOT", NOT);  }
        case 263: break;
        case 87: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [161] { return symbol(\"AND\", AND); }");
          {  return symbol("AND", AND);  }
        case 264: break;
        case 107: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [126] { return symbol(\"FOR\", FOR); }");
          {  return symbol("FOR", FOR);  }
        case 265: break;
        case 111: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [121] { return symbol(\"VAR\", VAR); }");
          {  return symbol("VAR", VAR);  }
        case 266: break;
        case 123: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [145] { return symbol(\"MAP\", MAP); }");
          {  return symbol("MAP", MAP);  }
        case 267: break;
        case 39: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [201] { return symbol(\"RPAR\", RPAR); }");
          {  return symbol("RPAR", RPAR);  }
        case 268: break;
        case 38: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [200] { return symbol(\"LPAR\", LPAR); }");
          {  return symbol("LPAR", LPAR);  }
        case 269: break;
        case 28: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [157] { return symbol(\"PLUS\", PLUS); }");
          {  return symbol("PLUS", PLUS);  }
        case 270: break;
        case 132: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [124] { return symbol(\"ELSE\", ELSE); }");
          {  return symbol("ELSE", ELSE);  }
        case 271: break;
        case 136: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [134] { return symbol(\"TYPE\", TYPE); }");
          {  return symbol("TYPE", TYPE);  }
        case 272: break;
        case 139: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [128] { return symbol(\"FUNC\", FUNC); }");
          {  return symbol("FUNC", FUNC);  }
        case 273: break;
        case 146: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [123] { return symbol(\"CASE\", CASE); }");
          {  return symbol("CASE", CASE);  }
        case 274: break;
        case 147: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [139] { return symbol(\"CHAN\", CHAN); }");
          {  return symbol("CHAN", CHAN);  }
        case 275: break;
        case 151: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [143] { return symbol(\"GOTO\", GOTO); }");
          {  return symbol("GOTO", GOTO);  }
        case 276: break;
        case 0: 
        case 6: 
        case 44: 
        case 127: 
          System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+yytext()+"--");
          System.out.println("action [113] { }");
          {   }
        case 277: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java PasitoScanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        PasitoScanner scanner = null;
        try {
          scanner = new PasitoScanner( new java.io.FileReader(argv[i]) );
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.yy_atEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
